# 应用名称
spring.application.name=poetry
# THYMELEAF (ThymeleafAutoConfiguration)
# 开启模板缓存（默认值： true ）
spring.thymeleaf.cache=true
# 检查模板是否存在，然后再呈现
spring.thymeleaf.check-template=true
# 检查模板位置是否正确（默认值 :true ）
spring.thymeleaf.check-template-location=true
#Content-Type 的值（默认值： text/html ）
spring.thymeleaf.servlet.content-type=text/html
# 开启 MVC Thymeleaf 视图解析（默认值： true ）
spring.thymeleaf.enabled=true
# 模板编码
spring.thymeleaf.encoding=UTF-8
# 要被排除在解析之外的视图名称列表，⽤逗号分隔
spring.thymeleaf.excluded-view-names=
# 要运⽤于模板之上的模板模式。另⻅ StandardTemplate-ModeHandlers( 默认值： HTML5)
spring.thymeleaf.mode=HTML
# 在构建 URL 时添加到视图名称前的前缀（默认值： classpath:/templates/ ）
spring.thymeleaf.prefix=classpath:/templates/
# 在构建 URL 时添加到视图名称后的后缀（默认值： .html ）
spring.thymeleaf.suffix=.html
# 数据库驱动：
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# 数据源名称
spring.datasource.name=defaultDataSource
# 数据库连接地址
spring.datasource.url=jdbc:mysql://localhost:3306/poetry?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useUnicode=true&useSSL=false
# 数据库用户名&密码：
spring.datasource.username=root
spring.datasource.password=root
# 应用服务 WEB 访问端口
server.port=8081
spring.devtools.restart.enabled=true

mybatis-plus.mapper-locations=classpath*:mapper/*.xml

#分页插件
pagehelper.helper-dialect=mysql
pagehelper.propertyName=propertyValue
pagehelper.reasonable=true
pagehelper.defaultCount=true
pagehelper.params=count=countSqlserver.servlet.context-path=/api


#日志
logging.level.root=info
logging.level.com.example.poetry=debug
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

#上传
spring.servlet.multipart.enabled=true
#设置单个文件最大长度
spring.servlet.multipart.max-file-size=10MB
#设置总上传数据总大小
spring.servlet.multipart.max-request-size=100MB


#文件保存地址
file.location=D:/JavaWeb/match/img
file.path=/file/**
com.test.base_picture_url=http://localhost:8081/imgae/

# token名称 (同时也是cookie名称)
sa-token.token-name=sa-token
# token有效期，单位s 默认30天, -1代表永不过期
sa-token.timeout=86400
# token临时有效期 (指定时间内无操作就视为token过期) 单位: 秒
sa-token.activity-timeout=-1
# 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)
sa-token.is-concurrent=true
# 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)
sa-token.is-share=true
# token风格
sa-token.token-style=uuid
# 是否输出操作日志
sa-token.is-log=false





